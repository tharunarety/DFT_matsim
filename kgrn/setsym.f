      SUBROUTINE setsym(ibz)
C  ********************************************************************
C  *                                                                  *
C  *  Set up the site group using the point group of the Bravais      *
C  *  lattice generated by ROTM3D.                                    *
C  *                                                                  *
C  ********************************************************************
      USE control_data ; USE lattice ; USE message ; USE symmetry
      IMPLICIT NONE
      CHARACTER(LEN=4), DIMENSION(48) :: symelt, symsg, smiss
      CHARACTER(LEN=4), DIMENSION(24) :: symelh
      CHARACTER(LEN=4), DIMENSION(12) :: symelr
      REAL(KIND=8), DIMENSION(:,:), ALLOCATABLE :: bsmtr
      REAL(KIND=8) :: an
      INTEGER :: ibz, irot, iq, isg, i
C
      REAL(KIND=8), DIMENSION(nq) :: qtiqx, qtiqy, qtiqz
      REAL(KIND=8), DIMENSION(nq*nq+1) :: dqqx, dqqy, dqqz
      REAL(KIND=8), DIMENSION(3) :: dltqq(3)
      REAL(KIND=8) :: qtx, qty, qtz, check
      INTEGER, DIMENSION(nq) :: iqiqp
      INTEGER :: nqnq, iiqiqp, iqp, iqfnd, neqprt, nmiss
C
C     Cubic system
C
      DATA symelt/'E','sigb','C31+','C31-','sigf','sige','C4z+','C4z-',
     . 'C2z','sigx','C2d','C4y-','S64-','S62+','sigy','C4x+','C2c',
     . 'S62-','S63+','siga','C33+','C34-','S4x+','S4y-','I','C2b','S61-'
     .,'S61+','C2f','C2e','S4z-','S4z+','sigz','C2x','sigd','S4y+',
     . 'C34+','C32-','C2y','S4x-','sigc','C32+','C33-','C2a','S63-',
     . 'S64+','C4x-','C4y+'/
C
C     Hexagonal system
C
      DATA symelh/'E','C3+','C3-','C211','C221','C212','sigm',
     .                'c3+','c3-','c211','c221','c212',
     .            'I','I3+','I3-','I211','I221','I212','isig',
     .                'i3+','i3-','i211','i221','i212'/
C
C     Trigonal system
C
      DATA symelr/'E','C3+','C3-','C2h1','C2h2','C2h3',
     .            'I','s6-','s6+','sig1','sig2','sig3'/
C
      ALLOCATE(iwrot(48),ibzr(48,nq),wqst(nq),iprmt(48,nq))
      ALLOCATE(bsmtr(3,3))
C
      incribz=0
      nqnq=nq*nq+1
C
      DO iq=1,nq
         ibzr(1:48,iq)=ibzrot(1:48)
         iprmt(1:48,iq)=iq
      ENDDO
C
      dqqx(1)=0.d0
      dqqy(1)=0.d0
      dqqz(1)=0.d0
      nmiss=0
C
      DO 60 irot=1,nrot
C
C     If the symmetry operation is the symmetry
C     operation of the actual IBZ: Exclude the operation.
C
      IF(ibzrot(irot).EQ.0) THEN
         iwrot(irot)=0
         CYCLE
      ENDIF
      iwrot(irot)=1
      iiqiqp=1
C
C     QT = T(q)
C
      DO iq=1,nq
         qtiqx(iq)=QX(iq)*UGAM(irot,1,1,1)
     .            +QY(iq)*UGAM(irot,1,1,-1)
     .            +QZ(iq)*UGAM(irot,1,1,0)
         qtiqy(iq)=QX(iq)*UGAM(irot,1,-1,1)
     .            +QY(iq)*UGAM(irot,1,-1,-1)
     .            +QZ(iq)*UGAM(irot,1,-1,0)
         qtiqz(iq)=QX(iq)*UGAM(irot,1,0,1)
     .            +QY(iq)*UGAM(irot,1,0,-1)
     .            +QZ(iq)*UGAM(irot,1,0,0)
C
C        DQQ = q(iqp)-Tq(iq)
C
         DO iqp=1,nq
            iiqiqp=iiqiqp+1
            dqqx(iiqiqp)=QX(iqp)-qtiqx(iq)
            dqqy(iiqiqp)=QY(iqp)-qtiqy(iq)
            dqqz(iiqiqp)=QZ(iqp)-qtiqz(iq)
         ENDDO
      ENDDO
C
C     Check if T(Q)+DQQ is a symmetry operation
C
      DO iiqiqp=1,nqnq
         iqfnd=0
         DO 55 iq=1,nq
C
C        QT=T(Q)+DQQ(iiqiqp)
C
         qtx=qtiqx(iq)+dqqx(iiqiqp)
         qty=qtiqy(iq)+dqqy(iiqiqp)
         qtz=qtiqz(iq)+dqqz(iiqiqp)
C
C        Check if QT-Q' is a lattice vector (and thus there is a
C        symmetry operation T(IROT)+DQQ(IIQIQP) for a given input
C        crystal structure)
C
         DO 56 iqp=1,nq
            dltqq(1)=QX(iqp)-qtx
            dltqq(2)=QY(iqp)-qty
            dltqq(3)=QZ(iqp)-qtz
            check=ABS(dltqq(1))+ABS(dltqq(2))+ABS(dltqq(3))
C
C           Check, if QT=Q'
C
            IF(check.GT.1.d-5) THEN
C
C              Check, if QT-Q'=n1*BS(1)+n2*BS(2)+n3*BS(3)
C
               bsmtr(1,1:3)=BSX(1:3)
               bsmtr(2,1:3)=BSY(1:3)
               bsmtr(3,1:3)=BSZ(1:3)
               CALL GAUSS(3,3,bsmtr,dltqq)
               DO i=1,3
                  an=ANINT(dltqq(i))
                  IF(ABS(dltqq(i)-an).GT.1.d-4) GO TO 56
               ENDDO
            ENDIF
C
C           The next condition means that QT-Q' is a primitive vector
C           (or zero) and the positions QT and Q' are occupied by
C           equivalent atoms.
C           This means that symmetry operation T+DQQ IS a proper
C           operation for the input structure
C
            IF(itq(iq).EQ.itq(iqp)) THEN
               iqfnd=iqfnd+1
               iqiqp(iq)=iqp
               GOTO 55
            ENDIF
   56    CONTINUE
C
C        There is no Q' such that QT-Q' is a primitive vector (or zero)
C        and the positions QT and Q' are occupied by equivalent atoms.
C        This means that symmetry operation T+DQQ IS NOT a proper
C        operation for the input structure
C
   55    CONTINUE
C
C        The next condition means that T+DQQ is a proper symmetry
C        operation for all atoms of the basis
C
         IF(iqfnd.EQ.nq) GOTO 50
      ENDDO
C
C     For any DQQ T+DQQ is not a proper symmetry operation for some
C     atoms of the basis
C
      iwrot(irot)=0
      incribz=1
      iprmt(irot,1:nq)=0
      ibzr(irot,1:nq)=0
      nmiss=nmiss+1
      IF(ibz.EQ.4) THEN
         smiss(nmiss)=symelh(irot)
      ELSEIF(ibz.EQ.7) THEN
         smiss(nmiss)=symelr(irot)
      ELSE
         smiss(nmiss)=symelt(irot)
      ENDIF
      GO TO 60
C
   50 CONTINUE
C
C     Set permutation matrix
C
      DO iq=1,nq
         iqp=iqiqp(iq)
         IF(iqp.NE.iq) THEN
            iprmt(irot,iq)=iqp
            ibzr(irot,iq)=1
         ENDIF
      ENDDO
60    CONTINUE
C
      DO iq = 1,nq
         WRITE(m6,100) iq
         IF(msgl.GT.0) WRITE(msgio,100) iq
         neqprt=0
C
C        Site-group operations without permutations
C
         isg=0
         DO irot=1,nrot
         IF(ibzr(irot,iq).NE.0.AND.iq.EQ.iprmt(irot,iq)) THEN
            isg=isg+1
            IF(ibz.EQ.4) THEN
               symsg(isg)=symelh(irot)
            ELSEIF(ibz.EQ.7) THEN
               symsg(isg)=symelr(irot)
            ELSE
               symsg(isg)=symelt(irot)
            ENDIF
         ENDIF
         ENDDO
         WRITE(m6,101) symsg(1:isg)
         IF(msgl.GT.0) WRITE(msgio,101) symsg(1:isg)
C
C        Permutations
C
         DO irot=1,nrot
            IF(iwrot(irot).NE.0) THEN
               iqp=iprmt(irot,iq)
               IF(itq(iqp).EQ.itq(iq)) neqprt=neqprt+1
               IF(iqp.NE.iq) THEN
                  IF(ibz.EQ.4) THEN
                     WRITE(m6,120) iq,iqp,irot,symelh(irot)
                     IF(msgl.GT.0)
     .               WRITE(msgio,120) iq,iqp,irot,symelh(irot)
                  ELSEIF(ibz.EQ.7) THEN
                     WRITE(m6,120) iq,iqp,irot,symelr(irot)
                     IF(msgl.GT.0)
     .               WRITE(msgio,120) iq,iqp,irot,symelr(irot)
                  ELSE
                     WRITE(m6,120) iq,iqp,irot,symelt(irot)
                     IF(msgl.GT.0)
     .               WRITE(msgio,120) iq,iqp,irot,symelt(irot)
                  ENDIF
               ENDIF
            ENDIF
         ENDDO
         wqst(iq)=1.d0/neqprt
      ENDDO
C
C     Missing symmetry operations
C
      IF(nmiss.GT.0) THEN
         WRITE(m6,130)
         WRITE(m6,101) smiss(1:nmiss)
         IF(msgl.GT.0) THEN
           WRITE(msgio,130)
           WRITE(msgio,101) smiss(1:nmiss)
         ENDIF
      ENDIF
C
      DEALLOCATE(bsmtr)
C
  100 FORMAT(/,' SETSYM:   Set up the site-group symmetry elements',
     .       ' for IQ = ',i2)
  101 FORMAT(/,8(11x,8(a,2x),/))
  120 FORMAT(11x,i3,' ---> ',i3,4x,i3,1x,a)
  130 FORMAT(/,11X,'The irreducible Brillouin zone will be increased '
     .    /,11X,'by applying the following missing symmetry elements:')
      RETURN
      END
      SUBROUTINE GAUSS(NDIM,N,A,B)
      IMPLICIT NONE
      INTEGER :: NDIM, N, NM, I1, J1, J2
      REAL(KIND=8), DIMENSION(NDIM,NDIM) :: A
      REAL(KIND=8), DIMENSION(NDIM) :: B
      REAL(KIND=8) :: RMAX, VL, VL1
C
      DO I1=1,N
         RMAX=A(I1,I1)
         NM=I1
         DO J1=I1,N
            IF(ABS(A(J1,I1)).LE.ABS(RMAX)) CYCLE
            RMAX=A(J1,I1)
            NM=J1
         ENDDO
         DO J1=1,N
            VL=A(I1,J1)
            A(I1,J1)=A(NM,J1)
            A(NM,J1)=VL
         ENDDO
         VL=B(I1)
         B(I1)=B(NM)
         B(NM)=VL
         VL1=A(I1,I1)
         DO J1=1,N
            A(I1,J1)=A(I1,J1)/VL1
         ENDDO
         B(I1)=B(I1)/VL1
         DO J1=1,N
            IF(J1.EQ.I1) CYCLE
            VL1=A(J1,I1)
            DO J2=1,N
               A(J1,J2)=A(J1,J2)-A(I1,J2)*VL1
            ENDDO
            B(J1)=B(J1)-B(I1)*VL1
         ENDDO
      ENDDO
      RETURN
      END
